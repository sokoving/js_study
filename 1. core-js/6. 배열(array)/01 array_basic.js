/*
 배열(array)

 -한 개의 변수로 여러 개의 데이터를 저장하고 참조하고 싶을 때 사용
 -장점 : 복수의 데이터를 하나의 변수로 통제할 수 있다.

 -인덱스 :
 1. 배열 변수 이름 관례: 복수형(-s),  -List
 
 2. 배열 리터럴 : [요소, 요소, 요소] 요소를 쉼표로 구분하여 대괄호[]로 묶음
                [] 빈 배열 : 요소가 없어도 배열 생성 가능
                
 3. 요소(element) : 배열에 저장된 하나하나의 데이터
 
 4. 길이(length) : 배열에 들어있는 요소의 수

 5. 참조(reference) : arr[idx]
                    배열에서 데이터를 꺼내 쓴다.

 6. 인덱스(index) : 요소들에 부여되어 있는 번호
                > 0번부터 length-1 까지 매겨져 있다.
                > 인덱스를 활용해 for문으로 반복문 처리 가능(for ~ of는 안 됨)

 7. 배열 요소 수정 가능

 8. 배열 내부 데이터 전체 순회 (반복문 처리)
        > 데이터가 가까이 저장되기 때문에 반복문 처리할 때 순서가 빨라진다
 
 + var fruits = []; 
     > 빈 배열(empty array)
       데이터를 이용자가 입력하기 전 상태
 */



// 1. 배열 변수 이름 관례: 복수형(-s),  -List
// 2. 배열 리터럴 : 0개 이상의 요소를 쉼표로 구분하여 대괄호[]로 묶음
// 3. 요소(element) : 배열에 저장된 하나하나의 데이터
var fruits = ['사과', '포도', '오렌지', '복숭아', '자몽'];

// 4. 길이(length) : 배열 안에 요소의 수
console.log(`배열의 길이 : ${fruits.length}`);

// 5. 배열 요소를 '참조'한다
console.log(fruits[2]);
console.log(`${fruits[4]} 맛있어~~`);

// 6. index
var favorite = fruits[1];
console.log(`제일 좋아하는 과일: ${favorite}`);

// 7. 배열 요소 수정
fruits[3] = '파인애플';  //복숭아가 파인애플로 수정
console.log(fruits);


// 8. 배열 내부 데이터 전체 순회 (반복문 처리)
console.log(`=========================`);
//    참조 시작[0] ~ 배열 길이[length]
for (var i = 0; i < fruits.length; i++){
    console.log(`${fruits[i]} 맛있어요~`);
}